{"version":3,"sources":["constants.js","algorithm/helper.js","components/Box.js","reducer/actions.js","reducer/reducer.js","algorithm/algorithms.js","components/AlgoButton.js","components/AlgoSpeed.js","components/RandomizeMazeButton.js","DrawerBar.js","algorithm/nodesFunction.js","algorithm/quickUnionFind.js","algorithm/mazeGeneration.js","App.js","reportWebVitals.js","index.js"],"names":["VW","Math","max","document","documentElement","clientWidth","window","innerWidth","VH","clientHeight","innerHeight","DRAWER_WIDTH","NUM_COL","floor","NUM_ROW","NUM_BOX","WALL","START","TARGET","EMPTY","TRAFFIC","NOT_VISITED","VISITED_PREV","VISITED_CURR","SOLUTION","ALGO_NAME","RANDOM_MAZE","BINARY_MAZE","DFS_MAZE","PRIMS_MAZE","KRUSKAL_MAZE","WALL_GEN","getXYFromIndex","index","y","x","isValidLocation","nodes","ignoreWall","getIndexFromXY","indexIsWall","type","getNeighbor","step","neighbors","filter","pos","map","getPathNeighbor","xWall","yWall","n","w","shuffle","array","i","length","j","random","temp","DivBox","styled","div","small","indexOf","css","state","Box","disabled","node","handleClick","handleDrag","onClick","e","draggable","color","fontSize","background","SET_ALGO","SET_STEP","SET_ALGO_STATUS","SET_MAZE_GEN","SET_MAZE_GEN_STATUS","RUNNING","algoReducer","action","newState","algo","payload","status","maze_gen","maze_gen_status","MAX_DIST","dfsAlgo","startId","targetId","steps","algoMemoryObj","pathMap","undefined","marked","Set","lastVisited","deque","count","copyNodes","currentlyVisited","nodeIndex","pop","solved","inProgress","solution","markAsVisitedPrev","concat","solutionList","getSolutionList","push","has","add","neighborId","forEach","interimObj","bfsAlgo","algoType","distanceMap","pq","Heapify","distanceToN","getDistanceToNeighbor","getDistance","distanceToNeighbor","getHeuristic","size","currentNode","targetNode","x1","y1","x2","y2","sqrt","distMap","ls","tmp","tempNodes","algoList","Object","keys","AlgoButton","props","dispatch","useContext","DispatchContext","StateContext","React","useState","open","setOpen","anchorRef","useRef","handleClose","event","current","contains","target","Grid","container","direction","alignItems","item","xs","style","width","ButtonGroup","variant","ref","fullWidth","Button","onButtonClick","startIcon","prevOpen","Popper","anchorEl","role","transition","disablePortal","position","zIndex","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","option","MenuItem","selected","parseInt","marks","value","label","Array","from","_","useStyles","makeStyles","root","slider","marginLeft","marginRight","AlgoSpeed","classes","className","Typography","gutterBottom","Slider","onChange","newValue","min","RandomizeMazeButton","theme","appBar","drawer","flexShrink","drawerPaper","toolbar","mixins","mainHeader","headerLogo","margin","display","justifyContent","iconMargin","alignSelf","content","flexGrow","backgroundColor","palette","default","padding","spacing","infoIcon","listItemText","DrawerBar","infoList","primaryText","Tooltip","title","arrow","InfoOutlined","Drawer","paper","anchor","List","ListItem","handleAddMaze","onRunAlgoClick","Divider","ListItemIcon","ListItemText","primary","handleClearNodes","handleAddRandomTrafficNodes","InfoRounded","dense","clearNodes","nodeList","nodeType","reduce","accum","key","clearNode","nextType","QuickUnionFind","this","disjointSets","nodeId","isConnected","smallerOne","biggerOne","findParent","subParent","generateUnconnectedNodes","startingPoint","visited","walls","stack","nIndex","neighbor","wallIndex","n1Index","n2Index","START_NODE","TARGET_NODE","MazeRoot","createContext","App","boxMap","initializeNodes","setNodeList","startNode","intervalId","setIntervalId","setSolutionList","wallList","setWallList","useReducer","boxList","useMemo","useEffect","prevNodeList","sIndex","inverse","Provider","nextState","currentType","clearInterval","updatedNodeList","resetNodeState","newIntervalId","setInterval","rSolved","rInProgress","prevNodes","addRandomTrafficNodes","pathList","initialPoint","path","pathIndex","filteredNeighbors","reverse","generateDfsMaze","generateRandomMaze","initialNodes","westNode","southNode","westPath","southPath","isWestValidLocation","isNorthValidLocation","generateBinaryMaze","generatePrimsMaze","quickUnionFind","edgesCount","connect","generateKruskalMaze","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.24fc2ec3.chunk.js","sourcesContent":["export const VW = Math.max(\n  document.documentElement.clientWidth || 0,\n  window.innerWidth || 0\n);\nexport const VH = Math.max(\n  document.documentElement.clientHeight || 0,\n  window.innerHeight || 0\n);\n\nconst MIN_ROW = 10;\nconst MIN_COL = 20;\n\nexport const DRAWER_WIDTH = 300;\nexport const NUM_COL = Math.max(\n  MIN_COL,\n  Math.floor((VW - DRAWER_WIDTH) / 32.5)\n);\nexport const NUM_ROW = Math.max(MIN_ROW, Math.floor(VH / 32.5));\nexport const NUM_BOX = NUM_COL * NUM_ROW;\n\nexport const WALL = \"wall\";\nexport const START = \"start\";\nexport const TARGET = \"target\";\nexport const EMPTY = \"empty\";\nexport const TRAFFIC = \"traffic\";\n\nexport const NOT_VISITED = \"not_visited\";\nexport const VISITED_PREV = \"visited_prev\";\nexport const VISITED_CURR = \"visited_curr\";\nexport const SOLUTION = \"solution\";\n\nexport const BFS = 1;\nexport const DJIKSTRA = 2;\nexport const A_STAR = 3;\nexport const DFS = 4;\n\nexport const ALGO_NAME = {\n  [DFS]: \"DFS\",\n  [BFS]: \"BFS\",\n  [DJIKSTRA]: \"DJIKSTRA\",\n  [A_STAR]: \"A*\",\n};\n\nexport const RANDOM_MAZE = \"Random Maze\";\nexport const BINARY_MAZE = \"Binary Maze\";\nexport const DFS_MAZE = \"DFS Maze\";\nexport const PRIMS_MAZE = \"Prim's Maze\";\nexport const KRUSKAL_MAZE = \"Kruskal Maze\";\nexport const WALL_GEN = [DFS_MAZE, PRIMS_MAZE, BINARY_MAZE, KRUSKAL_MAZE, RANDOM_MAZE];\n","import { NUM_COL, NUM_ROW, WALL } from \"../constants\";\n\nexport const getXYFromIndex = (index) => {\n  const y = Math.floor(index / NUM_COL);\n  const x = index % NUM_COL;\n\n  return { x, y };\n};\n\nexport const isValidLocation = ({ x, y }, nodes, ignoreWall = false) => {\n  const index = getIndexFromXY({ x, y });\n  const indexIsWall = nodes[index]?.type !== WALL;\n\n  return (\n    0 <= x &&\n    x < NUM_COL &&\n    0 <= y &&\n    y < NUM_ROW &&\n    (ignoreWall || indexIsWall)\n  );\n};\n\nexport const getIndexFromXY = ({ x, y }) => y * NUM_COL + x;\n\n// Ignore diagonal\nexport const getNeighbor = (nodes, index, step = 1, ignoreWall = false) => {\n  const { x, y } = getXYFromIndex(index);\n\n  const neighbors = [\n    { x: x + step, y: y },\n    { x: x - step, y: y },\n    { x: x, y: y + step },\n    { x: x, y: y - step },\n  ];\n\n  return neighbors\n    .filter((pos) => isValidLocation(pos, nodes, ignoreWall))\n    .map((pos) => getIndexFromXY(pos));\n};\n\nexport const getPathNeighbor = (index, step = 2) => {\n  const { x, y } = getXYFromIndex(index);\n\n  const neighbors = [\n    { x: x + step, y: y, xWall: x + 1, yWall: y },\n    { x: x - step, y: y, xWall: x - 1, yWall: y },\n    { x: x, y: y + step, xWall: x, yWall: y + 1 },\n    { x: x, y: y - step, xWall: x, yWall: y - 1 },\n  ];\n\n  return neighbors\n    .filter((pos) => isValidLocation(pos, {}, true))\n    .map((pos) => ({\n      n: getIndexFromXY(pos),\n      w: getIndexFromXY({ x: pos.xWall, y: pos.yWall }),\n    }));\n};\n\n\nexport function shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n}","import React from \"react\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nimport TrackChangesIcon from \"@material-ui/icons/TrackChanges\";\nimport TrafficIcon from \"@material-ui/icons/Traffic\";\nimport styled, { css } from \"styled-components\";\nimport {\n  SOLUTION,\n  START,\n  TARGET,\n  VISITED_PREV,\n  VISITED_CURR,\n  WALL,\n  TRAFFIC,\n} from \"../constants\";\nimport { getXYFromIndex } from \"../algorithm/helper\";\n\nconst DivBox = styled.div`\n  background: white;\n  border-radius: 0px;\n  border: 0.5px solid lightblue;\n  height: 30px;\n  width: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  color: darkgray;\n\n  ${({ small, type }) => {\n    if (small && [START, TRAFFIC, TARGET].indexOf(type) !== -1) {\n      return css`\n        height: 20px;\n        width: 20px;\n        font-size: 25px;\n        border: transparent;\n        background: transparent;\n      `;\n    } else if (small) {\n      return css`\n        height: 20px;\n        width: 20px;\n        font-size: 25px;\n      `;\n    }\n  }};\n\n  ${({ type }) => {\n    if (type === TRAFFIC) {\n      return css`\n        color: lightgray;\n      `;\n    } else if (type === WALL) {\n      return css`\n        background: black;\n        border: 0.5px solid black;\n        -webkit-transition: background-color 1000ms linear;\n        -ms-transition: background-color 1000ms linear;\n        transition: background-color 1000ms linear;\n      `;\n    } else if (type === TARGET || type === START) {\n      return css`\n        background: transparent;\n      `;\n    }\n  }};\n\n  ${({ state }) => {\n    if (state === VISITED_PREV) {\n      return css`\n        background-color: lightsteelblue;\n        -webkit-transition: background-color 400ms linear;\n        -ms-transition: background-color 400ms linear;\n        transition: background-color 400ms linear;\n      `;\n    } else if (state === VISITED_CURR) {\n      return css`\n        background: steelblue;\n      `;\n    } else if (state === SOLUTION) {\n      return css`\n        background: lightseagreen;\n        color: black;\n      `;\n    }\n  }};\n`;\n\nconst Box = ({\n  disabled,\n  small,\n  node,\n  type,\n  state,\n  handleClick,\n  handleDrag,\n}) => {\n  return (\n    <DivBox\n      type={type}\n      state={state}\n      small={small}\n      onClick={(e) => !disabled && handleClick(e)}\n      // onMouseEnter={() => console.log(node, getXYFromIndex(node))}\n      draggable={!disabled && (type === TARGET || type === START)}\n    >\n      {type === START && (\n        <PlayCircleFilledIcon\n          color={\"inherit\"}\n          fontSize={\"inherit\"}\n          background=\"inherit\"\n        />\n      )}\n      {type === TARGET && (\n        <TrackChangesIcon\n          color={\"inherit\"}\n          fontSize={\"inherit\"}\n          background=\"inherit\"\n        />\n      )}\n      {type === TRAFFIC && (\n        <TrafficIcon\n          color={\"inherit\"}\n          fontSize={\"inherit\"}\n          background=\"inherit\"\n        />\n      )}\n    </DivBox>\n  );\n};\n\nexport default Box;\n","export const SET_ALGO = 'set_algo'\nexport const SET_STEP = 'set_step'\nexport const SET_ALGO_STATUS = 'set_algo_status'\n\nexport const SET_MAZE_GEN = 'set_maze_gen'\nexport const SET_MAZE_GEN_STATUS = 'set_maze_gen_status'\n\n\nexport const RUNNING = 'running'\nexport const GENERATING_MAZE = false","import {\n  RUNNING,\n  SET_ALGO,\n  SET_ALGO_STATUS,\n  SET_MAZE_GEN,\n  SET_MAZE_GEN_STATUS,\n  SET_STEP,\n} from \"./actions\";\n\nexport const algoReducer = (state = [], action) => {\n  switch (action.type) {\n    case SET_ALGO:\n      const newState = { ...state, algo: action.payload };\n      return newState;\n    case SET_STEP:\n      return { ...state, step: action.payload };\n    case SET_ALGO_STATUS:\n      return { ...state, status: action.payload };\n    case SET_MAZE_GEN:\n      return { ...state, maze_gen: action.payload };\n    case SET_MAZE_GEN_STATUS:\n      return { ...state, maze_gen_status: action.payload };\n    default:\n      return state;\n  }\n};\n","import Heapify from \"heapify\";\nimport {\n  A_STAR,\n  DFS,\n  DJIKSTRA,\n  NUM_COL,\n  NUM_ROW,\n  SOLUTION,\n  TRAFFIC,\n  VISITED_CURR,\n  VISITED_PREV,\n  WALL,\n} from \"../constants\";\nimport { getNeighbor, getXYFromIndex } from \"./helper\";\n\nconst MAX_DIST = 99999999999;\n\nexport const algo = (\n  nodes,\n  startId,\n  targetId,\n  algoType = DJIKSTRA,\n  steps = MAX_DIST,\n  algoMemoryObj\n) => {\n  if (algoType === DFS) {\n    return dfsAlgo(nodes, startId, targetId, algoType, steps, algoMemoryObj);\n  } else {\n    return bfsAlgo(nodes, startId, targetId, algoType, steps, algoMemoryObj);\n  }\n};\n\nconst dfsAlgo = (\n  nodes,\n  startId,\n  targetId,\n  algoType = DFS,\n  steps = MAX_DIST,\n  algoMemoryObj\n) => {\n  let pathMap = algoMemoryObj.pathMap || { [startId]: undefined };\n  let marked = algoMemoryObj.marked || new Set();\n  let lastVisited = algoMemoryObj.lastVisited || [];\n  let deque = algoMemoryObj.deque || [startId];\n\n  let count = 0;\n  let copyNodes = { ...nodes };\n  let currentlyVisited = [];\n\n  while (deque.length > 0 && count < steps) {\n    const nodeIndex = deque.pop();\n\n    count += 1;\n\n    if (targetId === nodeIndex) {\n      copyNodes = markAsVisitedPrev(\n        lastVisited.concat(currentlyVisited),\n        copyNodes\n      );\n      return {\n        solved: true,\n        inProgress: false,\n        solution: copyNodes,\n        solutionList: getSolutionList(pathMap, startId, targetId),\n      };\n    } else {\n      currentlyVisited.push(nodeIndex);\n      copyNodes[nodeIndex].state = VISITED_CURR;\n    }\n\n    if (!marked.has(nodeIndex)) {\n      marked.add(nodeIndex);\n      getNeighbor(copyNodes, nodeIndex)\n        .filter((neighborId) => !marked.has(neighborId))\n        .forEach((neighborId) => {\n          pathMap[neighborId] = nodeIndex;\n          deque.push(neighborId);\n        });\n    }\n  }\n\n  if (count === steps) {\n    copyNodes = markAsVisitedPrev(lastVisited, copyNodes);\n\n    return {\n      solved: false,\n      inProgress: true,\n      solution: copyNodes,\n      interimObj: {\n        pathMap,\n        marked,\n        lastVisited: currentlyVisited,\n        deque,\n      },\n    };\n  }\n\n  return { solved: false, inProgress: false, solution: copyNodes };\n};\n\nconst bfsAlgo = (\n  nodes,\n  startId,\n  targetId,\n  algoType = DJIKSTRA,\n  steps = MAX_DIST,\n  algoMemoryObj\n) => {\n  let distanceMap = algoMemoryObj.distanceMap || { [startId]: 0 };\n  let pathMap = algoMemoryObj.pathMap || { [startId]: undefined };\n  let marked = algoMemoryObj.marked || new Set();\n  let pq = algoMemoryObj.pq || new Heapify(NUM_COL * NUM_ROW);\n  let lastVisited = algoMemoryObj.lastVisited || [];\n\n  let count = 0;\n  let copyNodes = { ...nodes };\n  let currentlyVisited = [];\n\n  while (pq.size !== 0 && count < steps) {\n    const nodeIndex = pq.pop();\n    marked.add(nodeIndex);\n\n    if (targetId === nodeIndex) {\n      copyNodes = markAsVisitedPrev(\n        lastVisited.concat(currentlyVisited),\n        copyNodes\n      );\n      return {\n        solved: true,\n        inProgress: false,\n        solution: copyNodes,\n        solutionList: getSolutionList(pathMap, startId, targetId),\n      };\n    } else {\n      currentlyVisited.push(nodeIndex);\n      copyNodes[nodeIndex].state = VISITED_CURR;\n    }\n\n    count += 1;\n\n    const distanceToN = distanceMap[nodeIndex] || 0;\n    getNeighbor(copyNodes, nodeIndex)\n      .filter((neighborId) => !marked.has(neighborId))\n      .filter(\n        (neighborId) =>\n          distanceToN + getDistanceToNeighbor(algoType, nodes, neighborId) <\n          getDistance(distanceMap, neighborId)\n      )\n      .forEach((neighborId) => {\n        const distanceToNeighbor = getDistanceToNeighbor(\n          algoType,\n          nodes,\n          neighborId\n        );\n        distanceMap[neighborId] = distanceToN + distanceToNeighbor;\n        pathMap[neighborId] = nodeIndex;\n\n        pq.push(\n          neighborId,\n          distanceToN +\n            distanceToNeighbor +\n            getHeuristic(algoType, neighborId, targetId)\n        );\n      });\n  }\n\n  if (count === steps) {\n    copyNodes = markAsVisitedPrev(lastVisited, copyNodes);\n\n    return {\n      solved: false,\n      inProgress: true,\n      solution: copyNodes,\n      interimObj: {\n        distanceMap,\n        pathMap,\n        marked,\n        pq,\n        lastVisited: currentlyVisited,\n      },\n    };\n  }\n\n  return { solved: false, inProgress: false, solution: copyNodes };\n};\n\nconst getDistanceToNeighbor = (algoType, nodes, neighborId) => {\n  if (algoType === A_STAR || algoType === DJIKSTRA) {\n    return nodes[neighborId].type === TRAFFIC ? 3 : 1;\n  }\n  return 1;\n};\n\nconst getHeuristic = (algoType, currentNode, targetNode) => {\n  if (algoType === A_STAR) {\n    const { x: x1, y: y1 } = getXYFromIndex(currentNode);\n    const { x: x2, y: y2 } = getXYFromIndex(targetNode);\n\n    return Math.floor(Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2));\n  }\n  return 0;\n};\n\nconst getDistance = (distMap, index) => {\n  return distMap[index] === undefined ? MAX_DIST : distMap[index];\n};\n\nconst getSolution = (nodes, pathMap, startId, targetId) => {\n  let tmpNodes = { ...nodes };\n  let tmp = pathMap[targetId];\n  while (tmp && tmp !== startId) {\n    tmpNodes[tmp] = { ...tmpNodes[tmp], state: SOLUTION };\n    tmp = pathMap[tmp];\n  }\n  tmpNodes[startId] = { ...tmpNodes[startId], state: SOLUTION };\n  tmpNodes[targetId] = { ...tmpNodes[targetId], state: SOLUTION };\n\n  return tmpNodes;\n};\n\nconst getSolutionList = (pathMap, startId, targetId) => {\n  let ls = [targetId];\n  let tmp = pathMap[targetId];\n  while (tmp && tmp !== startId) {\n    ls = ls.concat(tmp);\n    tmp = pathMap[tmp];\n  }\n  ls = ls.concat(startId);\n\n  return ls;\n};\n\nconst markAsVisitedPrev = (lastVisited, nodes) => {\n  let tempNodes = { ...nodes };\n  for (const index of lastVisited) {\n    tempNodes[index] = {\n      ...tempNodes[index],\n      state: VISITED_PREV,\n    };\n  }\n\n  return tempNodes;\n};\n","import React, { useContext } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport { DispatchContext, StateContext } from \"../App\";\nimport { ALGO_NAME } from \"../constants\";\nimport { SET_ALGO, RUNNING } from \"../reducer/actions\";\n\nconst algoList = Object.keys(ALGO_NAME);\n\nconst AlgoButton = (props) => {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleMenuItemClick = (algo) => {\n    dispatch({ type: SET_ALGO, payload: parseInt(algo) });\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <Grid item xs={12} style={{ width: \"100%\" }}>\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          ref={anchorRef}\n          aria-label=\"split button\"\n          style={{ width: \"100%\" }}\n          fullWidth\n        >\n          <Button\n            onClick={props.onButtonClick}\n            startIcon={<NavigationIcon />}\n            fullWidth\n          >\n            {`${state.status === RUNNING ? \"Stop\" : \"Run\"} ${\n              ALGO_NAME[state.algo]\n            }`}\n          </Button>\n          <Button\n            color=\"primary\"\n            size=\"small\"\n            aria-controls={open ? \"split-button-menu\" : undefined}\n            aria-expanded={open ? \"true\" : undefined}\n            aria-label=\"select merge strategy\"\n            aria-haspopup=\"menu\"\n            onClick={handleToggle}\n            style={{ width: \"15px\" }}\n          >\n            <ArrowDropDownIcon />\n          </Button>\n        </ButtonGroup>\n        <Popper\n          open={open}\n          anchorEl={anchorRef.current}\n          role={undefined}\n          transition\n          disablePortal\n          style={{ position: \"relative\", zIndex: 999 }}\n        >\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{\n                transformOrigin:\n                  placement === \"bottom\" ? \"center top\" : \"center bottom\",\n              }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList id=\"split-button-menu\">\n                    {algoList.map((option) => (\n                      <MenuItem\n                        key={option}\n                        selected={state.algo === option}\n                        onClick={() => handleMenuItemClick(option)}\n                      >\n                        {ALGO_NAME[option]}\n                      </MenuItem>\n                    ))}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AlgoButton;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { DispatchContext, StateContext } from \"../App\";\nimport { SET_STEP } from \"../reducer/actions\";\n\nconst marks = [\n  {\n    value: 1,\n    label: 1,\n  },\n  {\n    value: 2,\n  },\n]\n  .concat(Array.from({ length: 19 }, (_, i) => ({ value: (i + 1) * 5 })))\n  .concat({\n    value: 100,\n    label: 100,\n  });\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"90%\",\n  },\n  slider: {\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n  },\n});\n\nexport default function AlgoSpeed() {\n  const classes = useStyles();\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = (event, newValue) => {\n    if (newValue !== state.step) {\n      dispatch({ type: SET_STEP, payload: newValue });\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"discrete-slider-restrict\" gutterBottom>\n        Speed\n      </Typography>\n      <Slider\n        value={state.step}\n        onChange={handleChange}\n        aria-labelledby=\"discrete-slider-restrict\"\n        step={null}\n        min={1}\n        max={100}\n        marks={marks}\n        className={classes.slider}\n      />\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { DispatchContext, StateContext } from \"../App\";\nimport { WALL_GEN } from \"../constants\";\nimport { SET_MAZE_GEN } from \"../reducer/actions\";\n\nconst RandomizeMazeButton = (props) => {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleMenuItemClick = (algo) => {\n    dispatch({ type: SET_MAZE_GEN, payload: algo });\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ width: \"100%\" }}\n    >\n      <Grid item xs={12} style={{ width: \"100%\" }}>\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          ref={anchorRef}\n          aria-label=\"split button\"\n          fullWidth\n        >\n          <Button\n            onClick={props.onButtonClick}\n            fullWidth\n            startIcon={<AccountTreeIcon />}\n          >\n            {`${state.maze_gen_status ? \"Stop\" : \"Create\"} ${state.maze_gen}`}\n          </Button>\n          <Button\n            color=\"primary\"\n            size=\"small\"\n            aria-controls={open ? \"split-button-menu\" : undefined}\n            aria-expanded={open ? \"true\" : undefined}\n            aria-label=\"select merge strategy\"\n            aria-haspopup=\"menu\"\n            onClick={handleToggle}\n            style={{ width: \"15px\" }}\n          >\n            <ArrowDropDownIcon />\n          </Button>\n        </ButtonGroup>\n        <Popper\n          open={open}\n          anchorEl={anchorRef.current}\n          role={undefined}\n          transition\n          disablePortal\n          style={{ position: \"relative\", zIndex: 999 }}\n        >\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{\n                transformOrigin:\n                  placement === \"bottom\" ? \"center top\" : \"center bottom\",\n              }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList id=\"split-button-menu\">\n                    {WALL_GEN.map((option) => (\n                      <MenuItem\n                        key={option}\n                        selected={state.maze_gen === option}\n                        onClick={() => handleMenuItemClick(option)}\n                      >\n                        {option}\n                      </MenuItem>\n                    ))}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default RandomizeMazeButton;\n","import React, { useContext } from \"react\";\nimport {\n  Drawer,\n  makeStyles,\n  List,\n  ListItem,\n  Divider,\n  Button,\n  Typography,\n  Tooltip,\n} from \"@material-ui/core\";\nimport \"@fontsource/roboto\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport BlurOnIcon from \"@material-ui/icons/BlurOn\";\nimport Box from \"./components/Box\";\nimport { StateContext, DispatchContext } from \"./App\";\nimport {\n  DRAWER_WIDTH,\n  SOLUTION,\n  START,\n  TARGET,\n  TRAFFIC,\n  VISITED_CURR,\n  VISITED_PREV,\n  WALL,\n} from \"./constants\";\nimport AlgoButton from \"./components/AlgoButton\";\nimport AlgoSpeed from \"./components/AlgoSpeed\";\nimport RandomizeMazeButton from \"./components/RandomizeMazeButton\";\nimport { InfoOutlined, InfoRounded } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    width: `calc(100% - ${DRAWER_WIDTH}px)`,\n    marginRight: DRAWER_WIDTH,\n  },\n  drawer: {\n    width: DRAWER_WIDTH,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n    background: \"#EFEFEF\",\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  mainHeader: {\n    background: \"#393939\",\n  },\n  headerLogo: {\n    margin: \"20px\",\n    display: \"flex\",\n    color: \"#EFEFEF\",\n    justifyContent: \"center\",\n  },\n  iconMargin: { alignSelf: \"center\", marginRight: \"5px\" },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n  },\n  infoIcon: { alignSelf: \"center\", marginLeft: \"5px\" },\n  listItemText: { display: \"flex\" },\n}));\n\nconst DrawerBar = (props) => {\n  const classes = useStyles();\n\n  const infoList = [\n    { primaryText: \"Empty Node\" },\n    {\n      primaryText: (\n        <div className={classes.listItemText}>\n          {\"Wall Node\"}\n          <Tooltip title=\"Wall Node is impenetrable\" arrow>\n            <InfoOutlined fontSize=\"inherit\" className={classes.infoIcon} />\n          </Tooltip>\n        </div>\n      ),\n      type: WALL,\n    },\n    {\n      primaryText: (\n        <div className={classes.listItemText}>\n          {\"Traffic Node\"}\n          <Tooltip title=\"Traffic Node costs 3x more to traverse\" arrow>\n            <InfoOutlined fontSize=\"inherit\" className={classes.infoIcon} />\n          </Tooltip>\n        </div>\n      ),\n      type: TRAFFIC,\n    },\n    {\n      primaryText: \"Currently Node\",\n      state: VISITED_CURR,\n    },\n    {\n      primaryText: \"Visited Node\",\n      state: VISITED_PREV,\n    },\n    {\n      primaryText: \"Solution\",\n      state: SOLUTION,\n    },\n    { primaryText: \"Start Node\", type: START },\n    { primaryText: \"Target Node\", type: TARGET },\n  ];\n\n  return (\n    <>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        color=\"secondary\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"right\"\n      >\n        <div className={classes.mainHeader}>\n          <Typography variant={\"h4\"} className={classes.headerLogo}>\n            <BlurOnIcon fontSize=\"inherit\" className={classes.iconMargin} />\n            <b>Maze & Paths</b>\n          </Typography>\n        </div>\n\n        <List>\n          <ListItem>\n            <RandomizeMazeButton onButtonClick={props.handleAddMaze} />\n          </ListItem>\n          <ListItem>\n            <AlgoButton onButtonClick={props.onRunAlgoClick} />\n          </ListItem>\n        </List>\n\n        <Divider />\n\n        <List>\n          <ListItem>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Algorithm Settings\" />\n          </ListItem>\n          <ListItem>\n            <AlgoSpeed />\n          </ListItem>\n        </List>\n        <Divider />\n\n        <List>\n          <ListItem>\n            <Button\n              variant=\"outlined\"\n              onClick={props.handleClearNodes}\n              color=\"primary\"\n              fullWidth\n            >\n              {`Clear Board`}\n            </Button>\n          </ListItem>\n\n          <ListItem>\n            <Button\n              variant=\"outlined\"\n              onClick={props.handleAddRandomTrafficNodes}\n              color=\"primary\"\n              fullWidth\n            >\n              {`Add Random Traffic`}\n            </Button>\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem>\n            <ListItemIcon>\n              <InfoRounded />\n            </ListItemIcon>\n            <ListItemText primary=\"Information\" />\n          </ListItem>\n          <List dense>\n            {infoList.map((item) => (\n              <ListItem>\n                <ListItemText primary={item.primaryText} />\n                <Box\n                  small\n                  disabled={true}\n                  type={item.type}\n                  state={item.state}\n                />\n              </ListItem>\n            ))}\n          </List>\n        </List>\n      </Drawer>\n    </>\n  );\n};\n\nexport default DrawerBar;\n","import { EMPTY, NOT_VISITED, START, TARGET, TRAFFIC, WALL } from \"../constants\";\n\nexport const initializeNodes = (START_NODE, TARGET_NODE, NUM_BOX) => {\n  const boxMap = {};\n\n  for (let i = 0; i < NUM_BOX; i++) {\n    boxMap[i] = {\n      type: i === START_NODE ? START : i === TARGET_NODE ? TARGET : EMPTY,\n    };\n  }\n\n  return boxMap;\n};\n\nexport const resetNodeState = (nodeList) => {\n  return Object.keys(nodeList).reduce((accum, key) => {\n    accum[key] = {\n      ...nodeList[key],\n      state: NOT_VISITED,\n    };\n    return accum;\n  }, {});\n};\n\nexport const addRandomWallNodes = (nodeList) => {\n  const cleanNodes = clearNodes(nodeList);\n\n  return Object.keys(cleanNodes).reduce((accum, key) => {\n    const type = cleanNodes[key].type;\n    if (Math.random() < 0.35 && type !== START && type !== TARGET) {\n      accum[key] = {\n        ...cleanNodes[key],\n        type: WALL,\n        state: NOT_VISITED,\n      };\n    } else {\n      accum[key] = { ...cleanNodes[key] };\n    }\n\n    return accum;\n  }, {});\n};\n\nexport const addRandomTrafficNodes = (nodeList) => {\n  return Object.keys(nodeList).reduce((accum, key) => {\n    const type = nodeList[key].type;\n    if (Math.random() < 0.2 && type === EMPTY) {\n      accum[key] = {\n        ...nodeList[key],\n        type: TRAFFIC,\n        state: NOT_VISITED,\n      };\n    } else {\n      accum[key] = { ...nodeList[key] };\n    }\n\n    return accum;\n  }, {});\n};\n\nexport const clearNodes = (nodeList, nodeType = EMPTY) => {\n  return Object.keys(nodeList).reduce((accum, key) => {\n    accum[key] = clearNode(nodeList[key], nodeType);\n    return accum;\n  }, {});\n};\n\nexport const clearNode = (node, nodeType) => {\n  const type = node.type;\n  const nextType = type === START || type === TARGET ? type : nodeType;\n  return { ...node, state: NOT_VISITED, type: nextType };\n};\n","export default class QuickUnionFind {\n  constructor(nodes) {\n    this.disjointSets = nodes.reduce((accum, nodeId) => {\n      accum[nodeId] = nodeId;\n      return accum;\n    }, {});\n  }\n\n  connect(i, j) {\n    if (!this.isConnected(i, j)) {\n      let smallerOne = i;\n      let biggerOne = j;\n\n      if (j < i) {\n        smallerOne = j;\n        biggerOne = i;\n      }\n\n      this.disjointSets[this.findParent(biggerOne)] =\n        this.findParent(smallerOne);\n    }\n  }\n\n  findParent(i) {\n    const subParent = this.disjointSets[i];\n    if (parseInt(subParent) === parseInt(i)) {\n      return i;\n    }\n\n    this.disjointSets[i] = this.findParent(subParent);\n    return this.disjointSets[i];\n  }\n\n  isConnected(i, j) {\n    if (i === j) {\n      return true;\n    } else {\n      return this.findParent(i) === this.findParent(j);\n    }\n  }\n}\n","import { NUM_BOX } from \"../constants\";\nimport {\n  getIndexFromXY,\n  getPathNeighbor,\n  getXYFromIndex,\n  isValidLocation,\n  shuffle,\n} from \"./helper\";\nimport QuickUnionFind from \"./quickUnionFind\";\n\nexport const generateDfsMaze = (startNode, targetNode) => {\n  let initialPoint = Math.floor(Math.random() * (NUM_BOX - 1));\n  while (initialPoint === startNode || initialPoint === targetNode) {\n    initialPoint = Math.floor(Math.random() * (NUM_BOX - 1));\n  }\n\n  let visited = new Set();\n  let stack = [{ n: initialPoint }];\n  let path = [];\n\n  while (stack.length > 0) {\n    const pathIndex = stack.pop();\n\n    if (!visited.has(pathIndex.n)) {\n      pathIndex.w && path.push(pathIndex.w);\n      path.push(pathIndex.n);\n\n      visited.add(pathIndex.n);\n\n      const fullNeighbors = getPathNeighbor(pathIndex.n, 2);\n      const filteredNeighbors = fullNeighbors.filter(\n        (neighborId) => !visited.has(neighborId.n)\n      );\n      shuffle(filteredNeighbors);\n\n      filteredNeighbors.forEach((neighborId) => {\n        stack.push(neighborId);\n      });\n    }\n  }\n\n  path.reverse();\n  return path;\n};\n\nexport const generatePrimsMaze = (startNode, targetNode) => {\n  let initialPoint = Math.floor(Math.random() * (NUM_BOX - 1));\n  while (initialPoint === startNode || initialPoint === targetNode) {\n    initialPoint = Math.floor(Math.random() * (NUM_BOX - 1));\n  }\n\n  let visited = new Set();\n  let stack = [{ n: initialPoint }];\n  let path = [];\n\n  while (stack.length > 0) {\n    shuffle(stack);\n    const pathIndex = stack.pop();\n\n    if (!visited.has(pathIndex.n)) {\n      pathIndex.w && path.push(pathIndex.w);\n      path.push(pathIndex.n);\n\n      visited.add(pathIndex.n);\n\n      const fullNeighbors = getPathNeighbor(pathIndex.n, 2);\n      const filteredNeighbors = fullNeighbors.filter(\n        (neighborId) => !visited.has(neighborId.n)\n      );\n\n      filteredNeighbors.forEach((neighborId) => {\n        stack.push(neighborId);\n      });\n    }\n  }\n\n  path.reverse();\n  return path;\n};\n\nexport const generateRandomMaze = (startNode, targetNode) => {\n  const wallList = [];\n  for (let i = 0; i < NUM_BOX; i++) {\n    if (Math.random() < 0.35 && i !== startNode && i !== targetNode) {\n      wallList.push(i);\n    }\n  }\n\n  return wallList;\n};\n\nexport const generateBinaryMaze = (startNode, targetNode) => {\n  let { nodes: initialNodes } = generateUnconnectedNodes();\n  let path = [...initialNodes];\n\n  for (let i = 0; i < initialNodes.length; i++) {\n    const pos = getXYFromIndex(initialNodes[i]);\n    const westNode = { x: pos.x + 2, y: pos.y };\n    const southNode = { x: pos.x, y: pos.y + 2 };\n    const westPath = { x: pos.x + 1, y: pos.y };\n    const southPath = { x: pos.x, y: pos.y + 1 };\n\n    const isWestValidLocation = isValidLocation(westNode, {}, true);\n    const isNorthValidLocation = isValidLocation(southNode, {}, true);\n\n    if (isNorthValidLocation && !isWestValidLocation) {\n      path.push(getIndexFromXY(southPath));\n    } else if (!isNorthValidLocation && isWestValidLocation) {\n      path.push(getIndexFromXY(westPath));\n    } else if (isNorthValidLocation && isWestValidLocation) {\n      const r = Math.random();\n      if (r < 0.5) {\n        path.push(getIndexFromXY(southPath));\n      } else {\n        path.push(getIndexFromXY(westPath));\n      }\n    }\n  }\n\n  path.reverse();\n  return path;\n};\n\nexport const generateKruskalMaze = (startNode, targetNode) => {\n  let { nodes: initialNodes, walls } = generateUnconnectedNodes();\n  let path = [...initialNodes];\n  let edges = new Set();\n  let quickUnionFind = new QuickUnionFind(initialNodes);\n  let wallList = [...walls];\n  shuffle(wallList);\n\n  let edgesCount = 0;\n  while (edgesCount < initialNodes.length - 1 && wallList.length > 0) {\n    const { wallIndex, n1Index, n2Index } = wallList.pop();\n\n    if (!quickUnionFind.isConnected(n1Index, n2Index)) {\n      path.push(wallIndex);\n      quickUnionFind.connect(n1Index, n2Index);\n      edgesCount += 1;\n    }\n  }\n\n  path.reverse();\n  return [...path];\n};\n\nexport const generateUnconnectedNodes = () => {\n  const possibleInitialConfiguration = [\n    { x: 0, y: 0 },\n    { x: 1, y: 0 },\n    { x: 0, y: 1 },\n    { x: 1, y: 1 },\n  ];\n\n  const startingPoint =\n    possibleInitialConfiguration[Math.floor(Math.random() * 4)];\n\n  let visited = new Set();\n  let nodes = [getIndexFromXY(startingPoint)];\n  let walls = new Set();\n  let stack = [getIndexFromXY(startingPoint)];\n  visited.add(getIndexFromXY(startingPoint));\n\n  while (stack.length > 0) {\n    const nIndex = stack.pop();\n    const neighbors = getPathNeighbor(nIndex, 2);\n\n    neighbors.forEach((neighbor) => {\n      if (!visited.has(neighbor.n)) {\n        stack.push(neighbor.n);\n        visited.add(neighbor.n);\n        nodes.push(neighbor.n);\n      }\n\n      walls.add({\n        wallIndex: neighbor.w,\n        n1Index: nIndex,\n        n2Index: neighbor.n,\n      });\n    });\n  }\n\n  return { nodes, walls };\n};\n","import React, { useState, useMemo, useReducer, useEffect } from \"react\";\nimport Heapify from \"heapify\";\nimport \"./App.css\";\nimport Box from \"./components/Box\";\nimport { algoReducer } from \"./reducer/reducer.js\";\nimport styled from \"styled-components\";\nimport {\n  EMPTY,\n  NUM_COL,\n  NUM_ROW,\n  START,\n  TARGET,\n  WALL,\n  VW,\n  DJIKSTRA,\n  NOT_VISITED,\n  DRAWER_WIDTH,\n  SOLUTION,\n  DFS,\n  NUM_BOX,\n  DFS_MAZE,\n  RANDOM_MAZE,\n  BINARY_MAZE,\n  PRIMS_MAZE,\n  KRUSKAL_MAZE,\n} from \"./constants\";\nimport { algo } from \"./algorithm/algorithms\";\nimport DrawerBar from \"./DrawerBar\";\nimport {\n  initializeNodes,\n  resetNodeState,\n  clearNodes,\n  addRandomTrafficNodes,\n  clearNode,\n} from \"./algorithm/nodesFunction\";\nimport {\n  RUNNING,\n  SET_ALGO_STATUS,\n  SET_MAZE_GEN_STATUS,\n} from \"./reducer/actions\";\nimport { getIndexFromXY } from \"./algorithm/helper\";\nimport {\n  generateBinaryMaze,\n  generateDfsMaze,\n  generateKruskalMaze,\n  generatePrimsMaze,\n  generateRandomMaze,\n} from \"./algorithm/mazeGeneration\";\n\nconst TIME_INTERVAL = 1; // 1 mili\nconst START_NODE = getIndexFromXY({\n  x: Math.floor(NUM_COL / 2 - 8),\n  y: Math.floor(NUM_ROW / 2),\n});\nconst TARGET_NODE = getIndexFromXY({\n  x: Math.floor(NUM_COL / 2 + 8),\n  y: Math.floor(NUM_ROW / 2),\n});\n\nconst MazeRoot = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${NUM_COL}, 1fr);\n  gap: 0 0;\n  width: 10px;\n  align-content: center;\n`;\n\nexport const StateContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nconst App = () => {\n  const [nodeList, setNodeList] = useState(\n    initializeNodes(START_NODE, TARGET_NODE, NUM_BOX)\n  );\n  const [startNode, setStartNode] = useState(START_NODE);\n  const [targetNode, setTargetNode] = useState(TARGET_NODE);\n  const [intervalId, setIntervalId] = useState(0);\n  const [solutionList, setSolutionList] = useState([]);\n  const [wallList, setWallList] = useState([]);\n\n  const [state, dispatch] = useReducer(algoReducer, {\n    algo: DJIKSTRA,\n    step: 10,\n    maze_gen: DFS_MAZE,\n    maze_gen_status: false,\n  });\n\n  const boxList = useMemo(() => {\n    const boxList = [];\n    for (let i = 0; i < NUM_BOX; i++) {\n      boxList.push(i);\n    }\n\n    return boxList;\n  }, []);\n\n  const handleAddMaze = () => {\n    if (!state.maze_gen_status) {\n      dispatch({ type: SET_MAZE_GEN_STATUS, payload: true });\n      let pathList = [];\n      let inverse = false;\n      if (state.maze_gen === DFS_MAZE) {\n        pathList = generateDfsMaze(startNode, targetNode);\n        inverse = true;\n      } else if (state.maze_gen === RANDOM_MAZE) {\n        pathList = generateRandomMaze(startNode, targetNode);\n      } else if (state.maze_gen === BINARY_MAZE) {\n        pathList = generateBinaryMaze(startNode, targetNode);\n        inverse = true;\n      } else if (state.maze_gen === PRIMS_MAZE) {\n        pathList = generatePrimsMaze(startNode, targetNode);\n        inverse = true;\n      } else if (state.maze_gen === KRUSKAL_MAZE) {\n        pathList = generateKruskalMaze(startNode, targetNode);\n        inverse = true;\n      }\n\n      setNodeList((prevNodes) => clearNodes(prevNodes, inverse ? WALL : EMPTY));\n\n      setWallList(pathList);\n    } else {\n      dispatch({ type: SET_MAZE_GEN_STATUS, payload: false });\n    }\n  };\n\n  const handleClearNodes = () => {\n    setNodeList((prevNodes) => clearNodes(prevNodes));\n  };\n\n  const handleAddRandomTrafficNodes = () => {\n    setNodeList((prevNodes) => addRandomTrafficNodes(prevNodes));\n  };\n\n  const runAlgorithm = () => {\n    setSolutionList([]);\n\n    let distanceMap = { [startNode]: 0 };\n    let pathMap = { [startNode]: undefined };\n    let marked = new Set();\n    let pq = new Heapify(NUM_COL * NUM_ROW);\n    let lastVisited = [];\n    let deque = [startNode];\n\n    // marked.add(startNode);\n    pq.push(startNode, 0);\n\n    if (intervalId) {\n      dispatch({ type: SET_ALGO_STATUS, payload: undefined });\n      clearInterval(intervalId);\n      setIntervalId(0);\n      return;\n    }\n\n    dispatch({ type: SET_ALGO_STATUS, payload: RUNNING });\n    let updatedNodeList = resetNodeState(nodeList);\n    const newIntervalId = setInterval(() => {\n      const algoMemoryObj =\n        state.algo === DFS\n          ? {\n              pathMap,\n              marked,\n              lastVisited,\n              deque,\n            }\n          : {\n              distanceMap,\n              pathMap,\n              marked,\n              pq,\n              lastVisited,\n            };\n\n      const {\n        solved: rSolved,\n        inProgress: rInProgress,\n        solution,\n        solutionList,\n        interimObj,\n      } = algo(\n        updatedNodeList,\n        startNode,\n        targetNode,\n        state.algo,\n        state.step,\n        algoMemoryObj\n      );\n\n      if (rInProgress) {\n        updatedNodeList = { ...solution };\n\n        pathMap = interimObj.pathMap;\n        marked = interimObj.marked;\n        lastVisited = interimObj.lastVisited;\n\n        if (state.algo !== DFS) {\n          pq = interimObj.pq;\n          distanceMap = interimObj.distanceMap;\n        } else {\n          deque = interimObj.deque;\n        }\n      }\n\n      (rSolved || rInProgress) && setNodeList(solution);\n\n      if (rSolved === true || (rSolved === false && rInProgress === false)) {\n        dispatch({ type: SET_ALGO_STATUS, payload: undefined });\n        clearInterval(newIntervalId);\n        setIntervalId(0);\n        if (solutionList) setSolutionList(solutionList);\n        return;\n      }\n    }, TIME_INTERVAL);\n\n    setIntervalId(newIntervalId);\n  };\n\n  // useEffect(() => {\n  //   let tempSolList = [...solutionList];\n  //   if (tempSolList.length !== 0) {\n  //     const interval = setInterval(() => {\n  //       setNodeList((prevNodeList) => {\n  //         const sIndex = tempSolList.pop();\n  //         prevNodeList[sIndex] = {\n  //           ...prevNodeList[sIndex],\n  //           state: SOLUTION,\n  //         };\n\n  //         return prevNodeList;\n  //       });\n\n  //       setSolutionList(tempSolList);\n\n  //       if (tempSolList.length === 0) {\n  //         clearInterval(interval);\n  //       }\n  //     }, TIME_INTERVAL);\n  //     return () => clearInterval(interval);\n  //   }\n  // }, [solutionList]);\n\n  useEffect(() => {\n    let temp = [...solutionList];\n    if (temp.length !== 0) {\n      setNodeList((prevNodeList) => {\n        let count = 0;\n        while (temp.length > 0 && count < Math.min(state.step / 2, 5)) {\n          const sIndex = temp.pop();\n          prevNodeList[sIndex] = {\n            ...prevNodeList[sIndex],\n            state: SOLUTION,\n          };\n          count += 1;\n        }\n\n        return prevNodeList;\n      });\n\n      setSolutionList(temp);\n    }\n  }, [solutionList]);\n\n  useEffect(() => {\n    const inverse =\n      [KRUSKAL_MAZE, DFS_MAZE, BINARY_MAZE, PRIMS_MAZE].indexOf(\n        state.maze_gen\n      ) !== -1;\n    let temp = [...wallList];\n\n    if (state.maze_gen_status) {\n      if (temp.length !== 0) {\n        setNodeList((prevNodeList) => {\n          let count = 0;\n          while (temp.length > 0 && count < state.step) {\n            const sIndex = temp.pop();\n            prevNodeList[sIndex] = clearNode(\n              prevNodeList[sIndex],\n              inverse ? EMPTY : WALL\n            );\n            count += 1;\n          }\n\n          return prevNodeList;\n        });\n\n        setWallList(temp);\n      } else {\n        dispatch({ type: SET_MAZE_GEN_STATUS, payload: false });\n        setWallList([]);\n      }\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [wallList, state.maze_gen_status]);\n\n  const handleClick = (i) => (e) => {\n    let nextType, nextState;\n    const currentType = nodeList[i].type;\n\n    if (\n      currentType !== TARGET &&\n      currentType !== START &&\n      currentType !== WALL\n    ) {\n      nextType = WALL;\n      nextState = NOT_VISITED;\n    } else if (currentType === WALL) {\n      nextType = EMPTY;\n      nextState = NOT_VISITED;\n    }\n\n    nextType &&\n      setNodeList({\n        ...nodeList,\n        [i]: {\n          ...nodeList[i],\n          type: nextType,\n          state: nextState,\n        },\n      });\n  };\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <div>\n          <div style={{ display: \"flex\" }}>\n            <MazeRoot>\n              {boxList.map((index) => (\n                <Box\n                  key={index}\n                  node={index}\n                  type={nodeList[index]?.type}\n                  state={nodeList[index]?.state}\n                  handleClick={handleClick(index)}\n                />\n              ))}\n            </MazeRoot>\n          </div>\n\n          <DrawerBar\n            onRunAlgoClick={runAlgorithm}\n            handleClearNodes={handleClearNodes}\n            handleAddRandomTrafficNodes={handleAddRandomTrafficNodes}\n            handleAddMaze={handleAddMaze}\n          />\n        </div>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}